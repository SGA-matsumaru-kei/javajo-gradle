apply plugin: 'base'

task fiveLangs {
    def outFile = '5-langs.txt'
    def contents = [
            'Java', 'Groovy', 'Scala',
            'Kotlin', 'Haskell'
    ].join('\n')
    outputs.file outFile
    outputs.upToDateWhen {
        file(outFile).exists() &&
                contents == file(outFile).text
    }
    doLast {
        file(outFile).write(contents, 'UTF-8')
    }
}

task fiveLangsToMd {
    def outFile = '5-langs.md'
    inputs.file tasks.fiveLangs
    outputs.file outFile
    doLast {
        inputs.files.singleFile.text.eachLine {
            def f = file(outFile)
            f << "* ${it}"
            f << '\n'
        }
    }
}

// dependsOnによるタスクの依存関係の設定

task first {
    doLast {
        println 'first'
    }
}

/* 2nd は 1st に依存 */
task second {
    dependsOn 'first'
    doLast {
        println 'second'
    }
}

/* 3rd は 1st に依存 */
task third(dependsOn: 'first') {
    doLast {
        println 'third'
    }
}

/* short は 2nd と 3rd に依存 */
/* short は プリミティブ型のshortと混同してしまうので、シングルクォートで囲ってある */
task 'short'(dependsOn: ['second', 'third']) {
    doLast {
        println 'short'
    }
}

/* catcher は short に依存 */
task catcher {
    doLast {
        println 'catcher'
    }
}
catcher.dependsOn 'short'

/* pitcher は catcher に依存 */
task pitcher(group: 'baseball') {
    doLast {
        println 'pitcher'
    }
}
pitcher.dependsOn catcher

// 演習4解答例
ext.sier = 'SIer'
task baseDesign(group: sier)
task detailDesign(group: sier, dependsOn: 'baseDesign')
task databaseDesign(group: sier, dependsOn: 'baseDesign')
task environmentDesign(group: sier, dependsOn: 'baseDesign')
task coding(group: sier, dependsOn: ['detailDesign', 'databaseDesign'])
task integTest(group: sier, dependsOn: ['detailDesign', 'coding'])
task totalTest(group: sier, dependsOn: ['integTest', 'environmentDesign', 'baseDesign'])
task delivery(group: sier, dependsOn: 'totalTest')

// 演習5解答例
ext.answer5 = 'answer5'
class RandomNumberTask extends DefaultTask {
    int number
    @TaskAction
    void showNumber() {
        def range = 1..10
        def num = range[new Random().nextInt(range.size())]
        println num
        number = num
    }
}

task randomNumber (type: RandomNumberTask)

task even(dependsOn: 'randomNumber') {
    def dep = tasks.randomNumber
    onlyIf {
        dep.didWork && dep.number % 2 == 0
    }
    doLast {
        println "${dep.number} is even."
    }
}

task great(dependsOn: 'randomNumber') {
    def dep = tasks.randomNumber
    onlyIf {
        dep.didWork && dep.number > 5
    }
    doLast {
        println "${dep.number} is great."
    }
}

task random(group: answer5, dependsOn: ['even', 'great'])

/*
mustRunAfter による設定
 */

task bef {
    doLast {
        println 'before task'
    }
}

task aft {
    mustRunAfter 'bef'
    doLast {
        println 'after task'
    }
}

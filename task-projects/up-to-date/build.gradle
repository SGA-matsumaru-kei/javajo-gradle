apply plugin: 'base'

if (file('answer.gradle').exists()) {
    apply from: 'answer.gradle'
}

task langs {
    def outputFile = file('languages.txt')
    /* outputs.file で定義する */
    outputs.file outputFile
    doLast {
        def contents = [
                'Java', 'Groovy', 'Scala',
                'Clojure', 'JRuby'
        ].join('\n')
        // ファイルへの書き出しは必要です
        outputFile.write(contents, 'UTF-8')
    }
}

task osAndLang {
    def matrix = ['windows', 'linux', 'osx'].collect {os ->
        ['Java', 'Groovy', 'Scala'].collect {lang ->
            [os: os, lang: lang]
        }
    }.flatten()
    def outputFiles = matrix.collect {
        file("conbination/${it.os}${it.lang}.txt")
    }
    /* outputs.files で定義する */
    outputs.files outputFiles
    doLast {
        if (!file('conbination').exists()) {
            file('conbination').mkdirs()
        }
        matrix.each {
            file("conbination/${it.os}${it.lang}.txt")
                    .write("${it.os} - ${it.lang}", 'UTF-8')
        }
    }
}

task showLanguages {
    inputs.file 'language-list.txt'
    doLast {
        println file('language-list.txt').text
    }
}

task langTypes {
    def dir = "${projectDir}/"
    inputs.files fileTree('langs')
    doLast {
        fileTree('langs').collect {
            "${it}".replace(dir, '')
        }.each {
            println it
        }
    }
}

task langTypesByDir {
    def dir = "${projectDir}/"
    inputs.dir file('langs')
    doLast {
        fileTree('langs').collect {
            "${it}".replace(dir, '')
        }.each {
            println it
        }
    }
}

task showLanguagesAsSource {
    inputs.source 'language-list.txt'
    doLast {
        println file('language-list.txt').text
    }
}

task langTypesBySourceDir {
    def dir = "${projectDir}/"
    inputs.sourceDir file('langs')
    doLast {
        fileTree('langs').collect {
            "${it}".replace(dir, '')
        }.each {
            println it
        }
    }
}

task langsWithUpToDate {
    def outputFile = file('languages.txt')
    def contents = [
            'Clojure', 'Groovy', 'Scala', 'Java', 'JRuby'
    ].join('\n')
    outputs.file outputFile
    outputs.upToDateWhen {
        outputFile.exists() && outputFile.text == contents
    }
    doLast {
        outputFile.write(contents, 'UTF-8')
    }
}
